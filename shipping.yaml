- name: Install shipping component 
  hosts: shipping
  become: yes

  tasks: 


  - name: install maven
    ansible.builtin.yum: 
      name: maven
      state: installed 

  - name: check roboshop user exist or not   #here we are checking either the robosho user exist or not 
    ansible.builtin.command: id roboshop
    register: out
    ignore_errors: true 

  - when: out.rc != 0 
    name: create user roboshop 
    become: yes
    ansible.builtin.user: 
      name: roboshop  

  - name: create /app directory exist or not 
    ansible.builtin.stat:
      path: /app
    register: directory


  - name: print the directory stats
    ansible.builtin.debug: 
      msg: "output: {{directory}}"

  - when: directory.stat.exists == false
    name: create /app directory 
    ansible.builtin.file: 
      path: /app
      state: directory


  - name: Download and unarchive the shipping module
    ansible.builtin.unarchive:
      src: https://roboshop-builds.s3.amazonaws.com/shipping.zip
      dest: /app
      remote_src: yes


  - name: maven package 
    ansible.builtin.command: mvn clean package
    args: 
      chdir: /app

  - name: maven package to targeted 
    ansible.builtin.command: mv target/shipping-1.0.jar shipping.jar
    args: 
      chdir: /app


  - name: Copy shipping service file
    ansible.builtin.copy:
      src: shipping.service
      dest: /etc/systemd/system/shipping.service


  - name: demon reload 
    ansible.builtin.systemd_service:
      daemon_reload: true

  - name: start and enable shipping 
    ansible.builtin.service: 
      name: shipping
      state: started 
      enabled: yes 

  
  - name: install mysql
    ansible.builtin.yum: 
      name: mysql
      state: installed

  - name: loading schema shipping data 
    ansible.builtin.command: mysql -h mysql.nishalkdevops.online -uroot -pRoboShop@1 < /app/schema/shipping.sql 

  - name: restart shipping
    ansible.builtin.service: 
      name: shipping
      state: restarted
      enabled: true 